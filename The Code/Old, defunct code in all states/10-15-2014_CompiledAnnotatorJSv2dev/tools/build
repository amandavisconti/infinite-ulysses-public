#!/usr/bin/env node
var child_process = require('child_process');
var fs = require('fs');
var path = require('path');

var browserify = require('browserify');
var convert = require('convert-source-map');
var glob = require('glob');
var sourceMap = require('source-map');
var through = require('through');
var UglifyJS = require('uglify-js');
var UglifyCSS = require('uglifycss');

var SourceMapConsumer = sourceMap.SourceMapConsumer;
var SourceMapGenerator = sourceMap.SourceMapGenerator;
var SourceNode = sourceMap.SourceNode;


// Uglify emits ugly warnings for source maps it can't resolve.
// It cannot map our license preamble or the browserify wrappers.
// It feels ugly, but let's just disable these.
UglifyJS.AST_Node.warn_function = null;


// Uglify a source with the supplied source map generator.
// Returns {code::String, map::SourceMapGenerator}
function uglify(src, srcMap) {
  var comment = '//# sourceMappingURL=';
  var inSrcMap = convert.fromJSON(srcMap.toString());
  var filename = inSrcMap.getProperty('file').replace('.js', '.min.js');

  // Parse the result with UglifyJS
  var ast = UglifyJS.parse(src, {filename: inSrcMap.getProperty('file')});

  // Set up the UglifyJS compression pipeline
  srcMap = UglifyJS.SourceMap({
    file: path.basename(filename),
    orig: srcMap.toString(),
    root: inSrcMap.getProperty('sourceRoot')
  });
  src = UglifyJS.OutputStream({
    comments: /Copyright/g,
    source_map: srcMap
  });

  // Perform the minification
  ast.figure_out_scope();
  ast = ast.transform(UglifyJS.Compressor());
  ast.figure_out_scope();
  ast.compute_char_frequency();
  ast.mangle_names();
  ast.print(src);

  // Read the source and source map from the uglify pipeline
  src = src.get() + '\n' + comment + filename.replace('pkg/', '') + '.map';
  srcMap = convert.fromJSON(srcMap.toString());

  // Add all the sources into the source map
  srcMap.setProperty('sourcesContent', inSrcMap.getProperty('sourcesContent'));

  srcMap = SourceMapGenerator.fromSourceMap(
    new SourceMapConsumer(srcMap.toObject())
  );

  return {code: src, map: srcMap};
}




// Package the bundles when called as the main script
if (require.main === module) {
  var depsOnly = false;
  var preamble = null;
  var targets = Array.prototype.slice.call(process.argv, 2);

  child_process.exec('./tools/preamble', function (err, preambleSrc) {
    if (err) throw (err);
    preamble = preambleSrc;

    while(targets.length) {
      var target = targets.shift();

      switch (target) {
      case '-c':
        css();
        break;
      case '-d':
        depsOnly = true;
        break;
      case 'annotator':
        core();
        break;
      case '-p':
        plugin(targets.shift());
        break;
      case 'annotator-full':
        full();
        break;
      case 'annotator-bookmarklet':
        bookmarklet();
        break;
      case 'bootstrap':
        bootstrap();
        break;
      case undefined:
        return;
      default:
        console.error('Unrecognized target:', target);
        process.exit(64);
        break;
      }
    }
  });

  function write(filename, node) {
    if (depsOnly) return process.stdout.write(node);
    node.prepend(preamble);

    // Output the source with the preamble appended
    var output = node.toStringWithSourceMap({file: filename});
    console.log('Writing', filename);
    fs.writeFileSync(filename, [
      output.code,
      convert.fromJSON(output.map.toString()).toComment()
    ].join('\n'));

    // Compress the source
    var compressed = uglify(output.code, output.map);

    // Write the minified source
    filename = filename.replace('.js', '.min.js');
    console.log('Writing', filename);
    fs.writeFileSync(filename, compressed.code);

    // Write the minified source map
    filename += '.map';
    console.log('Writing', filename);
    fs.writeFileSync(filename, compressed.map.toString());

    return node;
  }

  function css() {
    var src = '';
    var dataURI = child_process.spawn('./tools/data_uri_ify');

    fs.createReadStream('./css/annotator.css').pipe(dataURI.stdin);
    dataURI.stdout.pipe(through(write, end));

    function write (data) { src += data; }
    function end() {
      this.queue(null);

      console.log('Writing', 'pkg/annotator.css');
      fs.writeFileSync('pkg/annotator.css', preamble + src);

      src = UglifyCSS.processString(src);
      console.log('Writing', 'pkg/annotator.min.css');
      fs.writeFileSync('pkg/annotator.min.css', preamble + src);
    }
  }

  function core () {
    pack(browserify('./src/annotator'), 'pkg/annotator.js', {
      debug: true,
      standalone: 'Annotator'
    });
  }

  function plugin(name) {
    var exportName = name.replace(/^\w/, function (c) {
      return c.toUpperCase();
    });
    var source = './src/plugin/' + name;
    var target = 'pkg/annotator.' + path.basename(name).toLowerCase() + '.js';
    var b = browserify()
      .external('jquery')
      .external('annotator')
      .require('./src/namespace', {expose: 'annotator'})
      .add(source)
    pack(b, target, {
      debug: true,
      standalone: 'Annotator.Plugin.' + exportName
    });
  }

  function full() {
    var b = browserify().require('./src/annotator', {
      entry: true
    , expose: 'annotator'
    });

    // Add the plugins
    glob.sync('./src/plugin/*.js').forEach(function (p) {
      pluginName = path.basename(p);
      moduleName = 'annotator-plugin-' + pluginName;
      b.require(p, {expose: moduleName});
    });

    // Expose all the plugins by inlining require calls into annotator to work
    // around browserify restricting standalone bundles to one entry script.
    b.transform(function (file) {
      if (b._mapped['annotator'] == file) {
        return through(null, function () {
          this.queue('\n');
          for (var m in b._mapped) {
            if (m == 'annotator') continue;
            this.queue("require('" + m + "');\n");
          }
          this.queue(null);
        });
      } else {
        return through();
      }
    });

    pack(b, 'pkg/annotator-full.js', {
      debug: true,
      standalone: 'Annotator'
    });
  }

  function bookmarklet() {
    var b = browserify().require('./src/annotator', {
      entry: true
    , expose: 'annotator'
    });
    glob.sync(
      './src/plugin/{unsupported,auth,store,tags}'
    ).forEach(function (p) {
      b.add(p);
    });
    pack(b, 'pkg/annotator-bookmarklet.js', {
      debug: true
    });
  }

  function bootstrap() {
    pack(browserify('./src/bootstrap'), 'pkg/bootstrap.js', {
      debug: true
    });
  }

  function pack(b, filename, options) {
    var deps = '';

    if (depsOnly) {
      options.noParse = b._noParse;
      options.resolve = b._resolve.bind(b);
      options.transform = b._transforms;

      b.deps(options).pipe(through(logdeps));

      function logdeps(dep) {
        console.log(dep.id);
      }
    } else {
      b.bundle(options, function (err, result) {
        if (err) throw 'Error building ' + filename + ': ' + err;
        var src = convert.removeComments(result);
        var srcMap = convert.fromSource(result).toObject();

        // Make the source file paths relative
        srcMap.sources = srcMap.sources.map(function (src) {
          return path.relative('./src', src);
        });
        srcMap.file = path.basename(filename);

        var consumer = new SourceMapConsumer(srcMap);
        var node = SourceNode.fromStringWithSourceMap(src, consumer);
        write(filename, node);
      });
    }
  }
}
